pipeline {
    agent any

    tools {
        maven 'Maven 3.6.3'
        jdk 'JAVA_HOME'
    }

    environment {
        JAVA_HOME = '/usr/lib/jvm/java-17-openjdk-amd64'
        PATH = "${JAVA_HOME}/bin:${env.PATH}"
    }

    stages {
        stage('Cloner le dépôt') {
            steps {
                git branch: 'Nihed-PistManagment', url: 'https://github.com/maramnaderi/devops.git'
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('Tests unitaires') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }

        stage('Tests d\'intégration') {
            steps {
                sh 'mvn integration-test -DskipUnitTests'
            }
        }

        stage('Prepare Libraries') {
            steps {
                sh 'mvn dependency:copy-dependencies -DoutputDirectory=target/lib'
            }
        }
        stage('Building images') {
            steps {
                script {
                    def imageTag = "v1.${BUILD_NUMBER}"
                    withEnv(["IMAGE_TAG=${imageTag}"]) {
                        sh 'docker-compose build'
                        // Optional: tag latest
                        sh "docker tag nihed/gestion-pist:${imageTag} nihed/gestion-pist:latest"
                    }
                }
            }

            stage('Push Docker Image') {
                steps {
                    script {
                        def imageTag = "v1.${BUILD_NUMBER}"
                        withCredentials([string(credentialsId: 'docker-hub-password', variable: 'DOCKER_HUB_PASSWORD')]) {
                            sh "echo ${DOCKER_HUB_PASSWORD} | docker login -u nihed --password-stdin"
                            sh "docker push nihed/gestion-pist:${imageTag}"
                            sh "docker push nihed/gestion-pist:latest"
                        }
                    }
                }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'scanner'
                    withSonarQubeEnv('scanner') {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }

    post {
        success {
            echo 'Build et verification réussis!'
        }
        failure {
            echo 'La pipeline a échoué.'
        }
        always {
            echo 'Build completed'
        }
    }
}
