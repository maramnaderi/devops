pipeline {
    agent any

    tools {
        maven 'M2_HOME' // Assurez-vous que Maven est bien défini dans Jenkins -> Global Tool Configuration
    }

    environment {
        APP_ENV = "DEV"
        SONARQUBE = 'scanner' // Nom du serveur SonarQube dans Jenkins
        registryCredentials = 'nexus' // ID des credentials Nexus dans Jenkins
        registry = '192.168.33.10:8083' // Adresse du registre Nexus
    }

    options {
        timeout(time: 1, unit: 'MINUTES')
    }

    stages {

        stage('Checkout code') {
            steps {
                git branch: 'khairidinne',
                    url: 'https://github.com/maramnaderi/devops.git',
                    credentialsId: 'github-pat' // Doit exister dans Jenkins (type: Personal Access Token)
            }
        }

        stage('Build Maven project') {
            steps {
                sh 'mvn clean install -DskipTests'
            }
        }

        stage('SonarQube analysis') {
            steps {
                script {
                    withSonarQubeEnv(SONARQUBE) {
                        sh 'mvn sonar:sonar -Dsonar.projectKey=mon-projet -Dsonar.host.url=http://172.26.59.33:9000'
                    }
                }
            }
        }

        stage('Build Docker image') {
            steps {
                sh 'docker-compose build'
            }
        }

        stage('Push to Nexus Registry') {
            steps {
                script {
                    docker.withRegistry("http://${registry}", registryCredentials) {
                        sh "docker tag maramnaderi/my-app:latest ${registry}/my-app:latest"
                        sh "docker push ${registry}/my-app:latest"
                    }
                }
            }
        }

        stage('Run application with docker-compose') {
            steps {
                sh 'docker-compose up -d'
            }
        }
    }

    post {
        always {
            echo "====== Pipeline terminé ======"
        }
        success {
            echo "✅ Pipeline exécuté avec succès"
        }
        failure {
            echo "❌ Échec de l'exécution du pipeline"
        }
    }
}
