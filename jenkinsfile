pipeline {
    agent any

    environment {
        SONAR_TOKEN = credentials('scanner') // Token SonarQube
    }

    stages {
    
     stage('Setup') {
            steps {
                script {
                    // V√©rifie si le r√©pertoire ./data/mysql existe
                    sh 'mkdir -p ./data/mysql'
                }
            }
        }
        stage('R√©cup√©ration du code') {
            steps {
                script {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/khairidinne']],
                        userRemoteConfigs: [[
                            url: 'https://github.com/maramnaderi/devops.git',
                            credentialsId: 'github-pat'
                        ]]
                    ])
                }
            }
        }
   

        stage('Compilation Maven') {
            steps {
                script {
                    try {
                        sh 'mvn clean compile'
                    } catch (Exception e) {
                        echo "‚ùå Erreur Compilation Maven : ${e}"
                        error "√âchec de la compilation Maven"
                    }
                }
            }
        }

        stage('Tests Unitaires avec Mockito') {
            steps {
                script {
                    try {
                        sh 'mvn test'
                    } catch (Exception e) {
                        echo "‚ùå Erreur Tests Unitaires : ${e}"
                        error "√âchec des tests unitaires"
                    }
                }
            }
        }

        stage('G√©n√©ration du rapport JaCoCo') {
            steps {
                script {
                    try {
                        sh 'mvn jacoco:report'
                    } catch (Exception e) {
                        echo "‚ùå Erreur Rapport JaCoCo : ${e}"
                        error "√âchec g√©n√©ration rapport JaCoCo"
                    }
                }
            }
        }

        stage('Analyse SonarQube') {
            steps {
                script {
                    try {
                        sh '''
                            mvn sonar:sonar \
                            -Dsonar.projectKey=projet-devops \
                            -Dsonar.host.url=http://172.26.59.33:9000 \
                            -Dsonar.login=$SONAR_TOKEN
                        '''
                    } catch (Exception e) {
                        echo "‚ùå Erreur Analyse SonarQube : ${e}"
                        error "√âchec analyse SonarQube"
                    }
                }
            }
        }

        stage('Packaging Maven (sans tests)') {
            steps {
                script {
                    try {
                        sh 'mvn clean package -DskipTests'
                    } catch (Exception e) {
                        echo "‚ùå Erreur Packaging Maven : ${e}"
                        error "√âchec packaging Maven"
                    }
                }
            }
        }

       stage('D√©ploiement sur Nexus') {
            steps {
                script {
                    try {
                        sh 'mvn deploy'
                    } catch (Exception e) {
                        echo "Erreur lors du d√©ploiement sur Nexus : ${e}"
                        error "√âchec dans l'√©tape de d√©ploiement sur Nexus"
                    }
                }
            }
        }



        stage('Construction de l‚Äôimage Docker') {
            steps {
                script {
                    try {
                        sh 'docker build -t khairidinne/gestionski:latest .'
                    } catch (Exception e) {
                        echo "‚ùå Erreur Construction Image Docker : ${e}"
                        error "√âchec build image Docker"
                    }
                }
            }
        }

        stage('Connexion √† DockerHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                    sh "echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USERNAME} --password-stdin"
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    try {
                        sh "docker push khairidinne/gestionski:latest"
                        echo "‚úÖ Image Docker pouss√©e avec succ√®s sur Docker Hub."
                    } catch (Exception e) {
                        echo "‚ùå Erreur Push Docker : ${e}"
                        error "√âchec push Docker"
                    }
                }
            }
        }

       stage('D√©ploiement avec Docker Compose') {
    steps {
        script {
            try {
                sh '''
    echo "üßπ Suppression des anciens conteneurs conflictuels..."
    docker rm -f grafana prometheus || true

    echo "üîª Arr√™t et nettoyage des containers..."
    docker-compose down -v --remove-orphans

    echo "‚¨áÔ∏è Pull des images..."
    docker-compose pull

    echo "üöÄ D√©marrage des services avec build..."
    docker-compose up -d --build --force-recreate

    echo "‚úÖ Tous les services Docker sont lanc√©s."
    docker-compose ps
'''

            } catch (Exception e) {
                echo "‚ùå Erreur lors du d√©ploiement Docker Compose : ${e}"
                sh 'docker-compose logs'
                error "√âchec dans le d√©ploiement avec Docker Compose"
            }
        }
    }
}





    }
  post {
        always {
            emailext(
                from: 'hlelikhairi04@gmail.com',
                to: 'khairidinne.hleli@esprit.tn',
                subject: "Pipeline ${currentBuild.fullDisplayName} - Statut: ${currentBuild.currentResult}",
                body: """
                Statut du build : ${currentBuild.currentResult}
                Projet analys√© par SonarQube : projet-devops
                Logs disponibles : ${env.BUILD_URL}
                """,
                recipientProviders: [[$class: 'DevelopersRecipientProvider']],
                attachLog: true
            )
        }

        failure {
            emailext(
                from: 'hlelikhairi04@gmail.com',
                to: 'khairidinne.hleli@esprit.tn',
                subject: "‚ùå √âchec du Pipeline ${currentBuild.fullDisplayName}",
                body: """
                Le pipeline a √©chou√© √† l'√©tape : ${currentBuild.fullDisplayName}.
                Logs : ${env.BUILD_URL}
                """,
                attachLog: true
            )
        }

        success {
            emailext(
                from: 'hlelikhairi04@gmail.com',
                to: 'khairidinne.hleli@esprit.tn',
                subject: "‚úÖ Succ√®s du Pipeline ${currentBuild.fullDisplayName}",
                body: """
                Le pipeline s'est termin√© avec succ√®s.
                Statut : ${currentBuild.currentResult}
                Logs : ${env.BUILD_URL}
                """,
                attachLog: true
            )
        }
    }

}
