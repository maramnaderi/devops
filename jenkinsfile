pipeline {
    agent any

    tools {
        maven 'Maven 3.6.3'
        jdk 'JAVA_HOME'
    }

   environment {
        JAVA_HOME = '/usr/lib/jvm/java-17-openjdk-amd64'
        PATH = "${JAVA_HOME}/bin:${env.PATH}"
        registry = '172.17.0.1:8085'
        registryCredentials = 'nexus'
        DOCKER_REPO = "${registry}/gestion-pist"
    }

    stages {
        stage('Cloner le d√©p√¥t') {
            steps {
                git branch: 'Nihed-PistManagment', url: 'https://github.com/maramnaderi/devops.git'
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('Tests unitaires') {
            steps {
                sh 'mvn test -Dspring.profiles.active=test'
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }

        stage('Tests d\'int√©gration') {
            steps {
                sh 'mvn verify -DskipUnitTests'
            }
        }

        stage('Code Coverage') {
            steps {
                sh 'mvn jacoco:report'
                sh 'mkdir -p target/site/jacoco'
                // Archive the JaCoCo report so it can be accessed through Jenkins UI
                archiveArtifacts artifacts: 'target/site/jacoco/**', allowEmptyArchive: true
                echo 'JaCoCo coverage report available in the build artifacts'
                publishHTML target: [
                    allowMissing: true,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: 'target/site/jacoco',
                    reportFiles: 'index.html',
                    reportName: 'JaCoCo Report'
                ]
            }
        }

        stage('Prepare Libraries') {
            steps {
                sh 'mvn dependency:copy-dependencies -DoutputDirectory=target/lib'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def imageTag = "v1.${BUILD_NUMBER}"
                    def nexusImage = "${DOCKER_REPO}:${imageTag}"
                    def nexusLatest = "${DOCKER_REPO}:latest"
                    def localImage = "localhost:8085/gestion-pist:latest"

                    // Build
                    sh 'docker-compose build spring-backend'

                    // Make sure the local image exists
                    def exists = sh(script: "docker images -q ${localImage}", returnStdout: true).trim()
                    if (!exists) {
                        error "‚ùå Image ${localImage} not found after build!"
                    }

                    // Tag it properly for Nexus registry
                    sh "docker tag ${localImage} ${nexusImage}"
                    sh "docker tag ${localImage} ${nexusLatest}"
                }
            }
        }

        // stage('Deploy to Nexus') {
        //     steps {
        //         script {
        //             def imageTag = "v1.${BUILD_NUMBER}"
        //             def fullImage = "${DOCKER_REPO}:${imageTag}"
        //             def latestImage = "${DOCKER_REPO}:latest"

        //             docker.withRegistry("http://${registry}", registryCredentials) {
        //                 sh "docker push ${fullImage}"
        //                 sh "docker push ${latestImage}"
        //             }
        //         }
        //     }
        // }

        stage('Debug Images') {
            steps {
                sh 'docker images'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'scanner'
                    withSonarQubeEnv('scanner') {
                        sh "${scannerHome}/bin/sonar-scanner \
                           -Dsonar.projectKey=gestion-pist \
                           -Dsonar.host.url=http://sonar:9000 \
                           -Dsonar.sources=src \
                           -Dsonar.java.binaries=target/classes"
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ Build and Nexus deployment succeeded!'
        }
        failure {
            echo '‚ùå Build failed. Please check logs.'
        }
        always {
            echo 'üîÅ Pipeline execution completed.'
        }
    }
}
