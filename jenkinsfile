pipeline {
    agent any

    tools {
        maven 'Maven 3.6.3'
        jdk 'JAVA_HOME'
    }

    environment {
        JAVA_HOME = '/usr/lib/jvm/java-17-openjdk-amd64'
        PATH = "${JAVA_HOME}/bin:${env.PATH}"
        registry = '192.168.33.10:8083' // Nexus hosted registry port
        registryCredentials = 'nexus'  // Jenkins credential ID (username/password or token)
        DOCKER_REPO = "${registry}/gestion-pist"
    }

    stages {
        stage('Cloner le d√©p√¥t') {
            steps {
                git branch: 'Nihed-PistManagment', url: 'https://github.com/maramnaderi/devops.git'
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('Tests unitaires') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }

        stage('Tests d\'int√©gration') {
            steps {
                sh 'mvn verify -DskipUnitTests'
            }
        }

        stage('Prepare Libraries') {
            steps {
                sh 'mvn dependency:copy-dependencies -DoutputDirectory=target/lib'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def imageTag = "v1.${BUILD_NUMBER}"
                    def fullImage = "${DOCKER_REPO}:${imageTag}"
                    def latestImage = "${DOCKER_REPO}:latest"

                    // Build using docker-compose
                    sh 'docker-compose build spring-backend'

                    // Ensure image was built correctly
                    def exists = sh(script: "docker images -q ${DOCKER_REPO}:latest || true", returnStdout: true).trim()
                    if (!exists) {
                        // Check for localhost fallback if built as localhost
                        exists = sh(script: "docker images -q localhost:8085/gestion-pist:latest || true", returnStdout: true).trim()
                        if (exists) {
                            echo "‚ö†Ô∏è Image was built as localhost:8085/gestion-pist instead. Retagging..."
                            sh "docker tag localhost:8085/gestion-pist:latest ${DOCKER_REPO}:latest"
                            sh "docker tag localhost:8085/gestion-pist:latest ${DOCKER_REPO}:${imageTag}"
                        } else {
                            error "‚ùå Docker image not found after build!"
                        }
                    } else {
                        // Tag version
                        sh "docker tag ${DOCKER_REPO}:latest ${fullImage}"
                    }
                }
            }
        }

        stage('Deploy to Nexus') {
            steps {
                script {
                    def imageTag = "v1.${BUILD_NUMBER}"
                    def fullImage = "${DOCKER_REPO}:${imageTag}"
                    def latestImage = "${DOCKER_REPO}:latest"

                    docker.withRegistry("http://${registry}", registryCredentials) {
                        sh "docker push ${fullImage}"
                        sh "docker push ${latestImage}"
                    }
                }
            }
        }

        stage('Debug Images') {
            steps {
                sh 'docker images'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'scanner'
                    withSonarQubeEnv('scanner') {
                        sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=gestion-pist -Dsonar.sources=src"
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ Build and Nexus deployment succeeded!'
        }
        failure {
            echo '‚ùå Build failed. Please check logs.'
        }
        always {
            echo 'üîÅ Pipeline execution completed.'
        }
    }
}
