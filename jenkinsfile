pipeline {
    agent any

    tools {
        maven 'Maven 3.6.3'
        jdk 'JAVA_HOME'
    }

    environment {
        JAVA_HOME = '/usr/lib/jvm/java-17-openjdk-amd64'
        PATH = "${JAVA_HOME}/bin:${env.PATH}"
        registry = '172.17.0.1:8085'
        registryCredentials = 'nexus'
        DOCKER_REPO = "${registry}/gestion-pist"
        dockerHubRepo = "localhost:8085/gestion-pist"
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'Nihed-PistManagment', url: 'https://github.com/maramnaderi/devops.git'
            }
        }

        stage('Build & Test') {
            steps {
                sh 'mvn verify jacoco:report -Dspring.profiles.active=test -T 1C'
            }
        }

        stage('Code Coverage') {
            steps {
                sh 'mvn jacoco:report'
                sh 'mkdir -p target/site/jacoco'
                archiveArtifacts artifacts: 'target/site/jacoco/**', allowEmptyArchive: true
                echo 'üìä JaCoCo coverage report archived.'

                script {
                    try {
                        publishHTML target: [
                            allowMissing: true,
                            alwaysLinkToLastBuild: true,
                            keepAll: true,
                            reportDir: 'target/site/jacoco',
                            reportFiles: 'index.html',
                            reportName: 'JaCoCo Report'
                        ]
                    } catch (err) {
                        echo "‚ö†Ô∏è HTML Publisher plugin not available: ${err.message}"
                    }
                }
            }
        }

        stage('Prepare Libraries') {
            steps {
                sh 'mvn dependency:copy-dependencies -DoutputDirectory=target/lib'
            }
        }

        stage('Build Docker Image (Inline Dockerfile)') {
            steps {
                script {
                    def imageTag = "v1.${BUILD_NUMBER}"
                    writeFile file: 'Dockerfile', text: '''
FROM openjdk:17-jdk-slim
WORKDIR /app
COPY target/*.jar /app/app.jar
EXPOSE 8081
ENTRYPOINT ["java", "-jar", "/app/app.jar"]
'''
                    sh "docker build -t ${dockerHubRepo}:${imageTag} ."
                }
            }
        }

        stage('Build Docker Image (Docker Compose)') {
            steps {
                script {
                    def imageTag = "v1.${BUILD_NUMBER}"
                    def nexusImage = "${DOCKER_REPO}:${imageTag}"
                    def nexusLatest = "${DOCKER_REPO}:latest"
                    def localImage = "localhost:8085/gestion-pist:latest"

                    sh '''
                        if [ ! -w /var/run/docker.sock ]; then
                            echo "‚ùå No Docker permission. Add user to docker group or fix /var/run/docker.sock permissions."
                            exit 1
                        fi
                        docker-compose build spring-backend
                    '''

                    def exists = sh(script: "docker images -q ${localImage}", returnStdout: true).trim()
                    if (!exists) {
                        error "‚ùå Image ${localImage} not found after build!"
                    }

                    sh "docker tag ${localImage} ${nexusImage}"
                    sh "docker tag ${localImage} ${nexusLatest}"
                }
            }
        }

        stage('Debug Docker Images') {
            steps {
                sh 'docker images'
            }
        }

        

    post {
        success {
            echo '‚úÖ All stages passed. Deployment ready!'
        }
        failure {
            echo '‚ùå Pipeline failed. Check logs for details.'
        }
        always {
            echo 'üîÅ Pipeline finished running.'
        }
    }
}
